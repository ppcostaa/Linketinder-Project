DROP TABLE IF EXISTS MATCHS CASCADE;

DROP TABLE IF EXISTS LIKES CASCADE;

DROP TABLE IF EXISTS CANDIDATO_COMPETENCIAS CASCADE;

DROP TABLE IF EXISTS VAGAS CASCADE;

DROP TABLE IF EXISTS EMPRESAS CASCADE;

DROP TABLE IF EXISTS CANDIDATOS CASCADE;

DROP TABLE IF EXISTS COMPETENCIAS CASCADE;

DROP TABLE IF EXISTS LOCALIZACAO CASCADE;

DROP TABLE IF EXISTS USUARIOS CASCADE;

DROP TABLE IF EXISTS VAGA_COMPETENCIAS CASCADE;

CREATE TABLE USUARIOS
(
    ID_USUARIO SERIAL PRIMARY KEY,
    EMAIL      VARCHAR(255) UNIQUE NOT NULL,
    SENHA      VARCHAR(20)         NOT NULL,
    DESCRICAO  TEXT
);

CREATE TABLE LOCALIZACAO
(
    ID_LOCALIZACAO SERIAL PRIMARY KEY,
    CEP            VARCHAR(10),
    PAIS           VARCHAR(100)
);

CREATE TABLE COMPETENCIAS
(
    ID_COMPETENCIA   SERIAL PRIMARY KEY,
    NOME_COMPETENCIA VARCHAR(255) NOT NULL
);

CREATE TABLE CANDIDATOS
(
    ID_CANDIDATO    SERIAL PRIMARY KEY,
    ID_USUARIO      INT REFERENCES USUARIOS (ID_USUARIO),
    ID_LOCALIZACAO  INT REFERENCES LOCALIZACAO (ID_LOCALIZACAO),
    NOME            VARCHAR(100),
    SOBRENOME       VARCHAR(100),
    DATA_NASCIMENTO DATE,
    CPF             VARCHAR(14) UNIQUE NOT NULL
);

CREATE TABLE EMPRESAS
(
    ID_EMPRESA     SERIAL PRIMARY KEY,
    ID_USUARIO     INT REFERENCES USUARIOS (ID_USUARIO),
    ID_LOCALIZACAO INT REFERENCES LOCALIZACAO (ID_LOCALIZACAO),
    NOME_EMPRESA   VARCHAR(255),
    CNPJ           VARCHAR(18) UNIQUE NOT NULL
);

CREATE TABLE VAGAS
(
    ID_VAGA        SERIAL PRIMARY KEY,
    ID_EMPRESA     INT REFERENCES EMPRESAS (ID_EMPRESA),
    NOME_VAGA      VARCHAR(255),
    DESCRICAO_VAGA TEXT,
    LOCAL_ESTADO   VARCHAR(100),
    LOCAL_CIDADE   VARCHAR(100)
);

CREATE TABLE CANDIDATO_COMPETENCIAS
(
    ID_CANDIDATO   INT REFERENCES CANDIDATOS (ID_CANDIDATO),
    ID_COMPETENCIA INT REFERENCES COMPETENCIAS (ID_COMPETENCIA),
    PRIMARY KEY (ID_CANDIDATO, ID_COMPETENCIA)
);

CREATE TABLE VAGA_COMPETENCIAS
(
    ID_VAGA        INT REFERENCES VAGAS (ID_VAGA),
    ID_COMPETENCIA INT REFERENCES COMPETENCIAS (ID_COMPETENCIA),
    PRIMARY KEY (ID_VAGA, ID_COMPETENCIA)
);

CREATE TABLE LIKES
(
    ID_LIKE      SERIAL PRIMARY KEY,
    ID_CANDIDATO INT REFERENCES CANDIDATOS (ID_CANDIDATO),
    ID_EMPRESA   INT REFERENCES EMPRESAS (ID_EMPRESA)
);

CREATE TABLE MATCHS
(
    CANDIDATO_ID INT REFERENCES CANDIDATOS (ID_CANDIDATO) ON DELETE CASCADE,
    EMPRESA_ID   INT REFERENCES EMPRESAS (ID_EMPRESA) ON DELETE CASCADE,
    PRIMARY KEY (CANDIDATO_ID, EMPRESA_ID)
);

INSERT INTO USUARIOS (EMAIL, SENHA, DESCRICAO)
VALUES ('sandubinha@email.com',
        'senha123',
        'Busco novas oportunidades de trabalho.'),
       ('contato@pastelsoft.com',
        'senha303',
        'Software ERP para redes de restaurantes.');

INSERT INTO LOCALIZACAO (CEP, PAIS)
VALUES ('12345-678', 'Brasil'),
       ('54321-123', 'Brasil');

INSERT INTO COMPETENCIAS (NOME_COMPETENCIA)
VALUES ('Python'),
       ('Java'),
       ('Groovy'),
       ('Angular'),
       ('Ilustrador');

INSERT INTO CANDIDATOS (ID_USUARIO,
                        ID_LOCALIZACAO,
                        NOME,
                        SOBRENOME,
                        DATA_NASCIMENTO,
                        CPF)
VALUES (1,
        1,
        'Sandubinha',
        'Silva',
        '1990-05-15',
        '12345678900');

INSERT INTO EMPRESAS (ID_USUARIO, ID_LOCALIZACAO, NOME_EMPRESA, CNPJ)
VALUES (2, 2, 'Pastelsoft', '12.345.678/0001-90');

INSERT INTO VAGAS (ID_EMPRESA,
                   NOME_VAGA,
                   DESCRICAO_VAGA,
                   LOCAL_ESTADO,
                   LOCAL_CIDADE)
VALUES (1,
        'Desenvolvedor Java',
        'Desenvolvimento de sistemas para ERP.',
        'São Paulo',
        'São Paulo');

INSERT INTO LIKES (ID_CANDIDATO, ID_EMPRESA)
VALUES (1, 1);

INSERT INTO LIKES (ID_EMPRESA, ID_CANDIDATO)
VALUES (1, 1);

INSERT INTO MATCHS (CANDIDATO_ID, EMPRESA_ID)
SELECT L1.ID_CANDIDATO, L1.ID_EMPRESA
FROM LIKES L1
         JOIN LIKES L2 ON L1.ID_CANDIDATO = L2.ID_EMPRESA AND L1.ID_EMPRESA = L2.ID_CANDIDATO
WHERE L1.ID_CANDIDATO = L2.ID_EMPRESA
  AND L1.ID_EMPRESA = L2.ID_CANDIDATO
ON CONFLICT (CANDIDATO_ID, EMPRESA_ID) DO NOTHING;

SELECT *
FROM CANDIDATOS;

SELECT *
FROM EMPRESAS;

SELECT *
FROM VAGAS;

SELECT *
FROM CANDIDATO_COMPETENCIAS;

SELECT *
FROM VAGA_COMPETENCIAS;

SELECT *
FROM LIKES;

SELECT *
FROM COMPETENCIAS;

SELECT *
FROM MATCHS
WHERE CANDIDATO_ID = 1
  AND EMPRESA_ID = 1;

SELECT *
FROM USUARIOS;

